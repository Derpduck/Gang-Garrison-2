<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="14">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">//Completely team scramble everyone
var newReds,newBlues,fixedReds,fixedBlues;
newReds=0
newBlues=0
fixedReds=0
fixedBlues=0

//Initial scramble
for(i=0; i&lt;ds_list_size(global.players); i+=1){
    newTeam=choose(0,1)
    player=ds_list_find_value(global.players,i)
    if(getCharacterObject(newTeam, player.class) != -1){
        with player {
            canSpawn = 1;
            if object != -1 with object instance_destroy();
            alarm[5] = 1;
        }
    }
    player.team=newTeam
    ServerPlayerChangeteam(ds_list_find_index(global.players,player),player.team,global.sendBuffer)
    
    //Keep track of players per team
    if player.team==TEAM_RED{
        newReds+=1
    }else if player.team==TEAM_BLUE{
        newBlues+=1
    }
}

fixedReds=newReds
fixedBlues=newBlues

//Check difference in player numbers for teams
if newReds-1&gt;newBlues{
    var difference;
    difference=(newReds-newBlues)-1
    
    for(i=0; i&lt;difference; i+=1){
        player=ds_list_find_value(global.players,i)
        if player.team==TEAM_RED{
            newTeam=TEAM_BLUE
            if(getCharacterObject(newTeam, player.class) != -1){
                with player {
                    canSpawn = 1;
                    if object != -1 with object instance_destroy();
                    alarm[5] = 1;
                }
            }
        player.team=newTeam
        ServerPlayerChangeteam(ds_list_find_index(global.players,player),player.team,global.sendBuffer)
        }
        fixedReds-=1
        fixedBlues+=1
    }
    console_print('Scramble was biased to red team, moving additional players.')
}else if newBlues-1&gt;newReds{
    var difference;
    difference=(newBlues-newReds)-1
    
    for(i=0; i&lt;difference; i+=1){
        player=ds_list_find_value(global.players,i)
        if player.team==TEAM_BLUE{
            newTeam=TEAM_RED
                if(getCharacterObject(newTeam, player.class) != -1){
                    with player {
                        canSpawn = 1;
                        if object != -1 with object instance_destroy();
                        alarm[5] = 1;
                    }
                }
                player.team=newTeam
                ServerPlayerChangeteam(ds_list_find_index(global.players,player),player.team,global.sendBuffer)
        }
            fixedBlues-=1
            fixedReds+=1
        }
        console_print('Scramble was biased to blue team, moving additional players.')
}
var redPlayers,bluePlayers;
redPlayers=ds_list_create()
bluePlayers=ds_list_create()

for(i=0; i&lt;ds_list_size(global.players); i+=1){
    player=ds_list_find_value(global.players,i)
    if player.team==TEAM_RED{
        ds_list_add(redPlayers,player)
    }else if player.team==TEAM_BLUE{
        ds_list_add(bluePlayers,player)
    }

}

//Remove players to meet team size (start with most recently joined)
var teamPicks,redOverflow,blueOverflow;
teamPicks=(maxPicks+2)/2
redOverflow=fixedReds-teamPicks
blueOverflow=fixedBlues-teamPicks

if fixedReds&gt;teamPicks{
    for(i=ds_list_size(redPlayers)-redOverflow; i&lt;ds_list_size(redPlayers); i+=1){
        player=ds_list_find_value(redPlayers,i)
        ds_list_delete(redPlayers,i)
        
        player.team=TEAM_SPECTATOR
        if player.object!=-1{
            with(player.object){
                if (!instance_exists(lastDamageDealer) || lastDamageDealer == player){
                    sendEventPlayerDeath(player, player, noone, DAMAGE_SOURCE_BID_FAREWELL);
                    doEventPlayerDeath(player, player, noone, DAMAGE_SOURCE_BID_FAREWELL);
                }else{
                    var assistant;
                    assistant = secondToLastDamageDealer;
                    if (lastDamageDealer.object){
                        if (lastDamageDealer.object.healer){
                            assistant = lastDamageDealer.object.healer;
                        }
                    }
                    sendEventPlayerDeath(player, lastDamageDealer, assistant, DAMAGE_SOURCE_FINISHED_OFF);
                    doEventPlayerDeath(player, lastDamageDealer, assistant, DAMAGE_SOURCE_FINISHED_OFF);
                }
            }
        }
        ServerPlayerChangeteam(ds_list_find_index(global.players,player),player.team,global.sendBuffer)
    }
}

if fixedBlues&gt;teamPicks{
    for(i=ds_list_size(bluePlayers)-blueOverflow; i&lt;ds_list_size(bluePlayers); i+=1){
        player=ds_list_find_value(bluePlayers,i)
        ds_list_delete(bluePlayers,i)
        
        player.team=TEAM_SPECTATOR
        if player.object!=-1{
            with(player.object){
                if (!instance_exists(lastDamageDealer) || lastDamageDealer == player){
                    sendEventPlayerDeath(player, player, noone, DAMAGE_SOURCE_BID_FAREWELL);
                    doEventPlayerDeath(player, player, noone, DAMAGE_SOURCE_BID_FAREWELL);
                }else{
                    var assistant;
                    assistant = secondToLastDamageDealer;
                    if (lastDamageDealer.object){
                        if (lastDamageDealer.object.healer){
                            assistant = lastDamageDealer.object.healer;
                        }
                    }
                    sendEventPlayerDeath(player, lastDamageDealer, assistant, DAMAGE_SOURCE_FINISHED_OFF);
                    doEventPlayerDeath(player, lastDamageDealer, assistant, DAMAGE_SOURCE_FINISHED_OFF);
                }
            }
        }
        ServerPlayerChangeteam(ds_list_find_index(global.players,player),player.team,global.sendBuffer)
    }
}

//Print a list of teams
var redString,blueString;
redString=""
blueString=""

for (i=0; i&lt;ds_list_size(redPlayers); i+=1){
    redString+=string(ds_list_find_value(redPlayers,i).name)+", "
}
redString=string_delete(redString,string_length(redString)-1,2)

for (i=0; i&lt;ds_list_size(bluePlayers); i+=1){
    blueString+=string(ds_list_find_value(bluePlayers,i).name)+", "
}
blueString=string_delete(blueString,string_length(blueString)-1,2)

var message;
message = global.chatPrintPrefix+P_RED+"RED team: "+redString
write_ubyte(global.publicChatBuffer, CHAT_PUBLIC_MESSAGE)
write_ushort(global.publicChatBuffer, string_length(message))
write_string(global.publicChatBuffer, message)
write_byte(global.publicChatBuffer,-1)
print_to_chat(message);// For the host

var message;
message = global.chatPrintPrefix+P_BLUE+"BLUE team: "+blueString
write_ubyte(global.publicChatBuffer, CHAT_PUBLIC_MESSAGE)
write_ushort(global.publicChatBuffer, string_length(message))
write_string(global.publicChatBuffer, message)
write_byte(global.publicChatBuffer,-1)
print_to_chat(message);// For the host

ds_list_destroy(redPlayers)
ds_list_destroy(bluePlayers)
</argument>
      </arguments>
    </action>
  </actions>
</event>
