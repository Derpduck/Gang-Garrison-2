<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="1">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if instance_exists(MenuController){
    exit;
}

if !instance_exists(Console){
    if keyboard_check_pressed(global.consoleKey){ //or keyboard_check_pressed(chr(223)){
        instance_create(0,0,Console)
    }
}else{
    if keyboard_check_pressed(global.consoleKey){ //or keyboard_check_pressed(chr(223)){
        with(Console){
            instance_destroy()
        }
    }
}

if instance_exists(Console) or global.isChatting==1{
    exit;
}

//Character binds
for (i=0; i&lt;ds_list_size(global.binds); i+=1){
    if real(ds_list_find_value(global.binds,i))==real(keyboard_lastkey){
        if keyboard_check_pressed(keyboard_lastkey){
            console_parseInput(ds_list_find_value(global.bindCommands,i))
        }
    }
}

//Non-character binds
for (i=0; i&lt;ds_list_size(global.bindsCtrl); i+=1){
    if real(keyboard_lastkey)==ds_map_find_value(global.spBinds,keyboard_lastkey){
        if real(ds_list_find_value(global.bindsCtrl,i))==real(keyboard_lastkey){
            if keyboard_check_pressed(ds_map_find_value(global.spBinds,keyboard_lastkey)){
                console_parseInput(ds_list_find_value(global.bindCommandsCtrl,i))
            }
        }
    }
}


var kickOpen;
kickOpen = false
if (instance_exists(ScoreTableController))
    if (ScoreTableController.showadmin)
        kickOpen = true;
    
if(instance_exists(TeamSelectController) || instance_exists(ClassSelectController) || kickOpen || instance_exists(SmallTeamSelect) || instance_exists(SmallClassSelect)){
    menuOpen = true;
}else{
    menuOpen = false;
}

//Checking for input - Mapped Keys
if(keyboard_check_pressed(global.changeTeam))
    inputChangeTeam();
if(keyboard_check_pressed(global.changeClass))
    inputChangeClass();

event_user(8);
    
var keybyte;
keybyte = 0;

/* KeyByte flags:
    02 - down
    
    08 - primary
    10 - secondary
    
    20 - right
    40 - left
    80 - up
*/

//character object exists
if(global.myself.object != -1)
{
    if !menuOpen and global.isChatting==0{
        if(keyboard_check(global.left)) keybyte |= $40;
        if(keyboard_check(global.right)) keybyte |= $20;
        if(keyboard_check(global.jump)) keybyte |= $80;
        if(keyboard_check(global.down)) keybyte |= $02;
        if(keyboard_check(global.taunt)) keybyte |= $01;
        if(keyboard_check_pressed(global.chat1)) inputChat1();
        if(keyboard_check_pressed(global.chat2)) inputChat2();
        if(keyboard_check_pressed(global.chat3)) inputChat3();
        if(keyboard_check_pressed(global.drop)) inputDrop();
        
        if(keyboard_check_pressed(global.medic)){
            inputCallMedic();
        }
        if keyboard_check_pressed(global.bubbleUber){
            write_ubyte(global.serverSocket, CHAT_BUBBLE)
            write_ubyte(global.serverSocket, 46)
        }
        if(keyboard_check_pressed(global.bubbleSpy)){
            write_ubyte(global.serverSocket, CHAT_BUBBLE)
            write_ubyte(global.serverSocket, 30)
        }
        
        if(!global.myself.humiliated)
        {
            if(keyboard_check(global.attack)) keybyte |= $10;
            if(keyboard_check(global.special)) keybyte |= $08;
            if(keyboard_check_pressed(global.special)) inputSpecial();
            if(keyboard_check_pressed(global.taunt)) inputTaunt();
            if(mouse_check_button(mb_left)){
                if(global.attack == MOUSE_LEFT) keybyte |= $10;
                if(global.special == MOUSE_LEFT) keybyte |= $08;
            }
            if(mouse_check_button_pressed(mb_left) and global.special == MOUSE_LEFT){
                inputSpecial();
            }

            if(mouse_check_button(mb_right)){
                if(global.attack == MOUSE_RIGHT) keybyte |= $10;
                if(global.special == MOUSE_RIGHT) keybyte |= $08;
            }
            if(mouse_check_button_pressed(mb_right) and global.special == MOUSE_RIGHT){
                inputSpecial();
            }
            
            if(mouse_check_button(mb_middle)){
                if(global.attack == MOUSE_MIDDLE) keybyte |= $10;
                if(global.special == MOUSE_MIDDLE) keybyte |= $08;
            }
            if(mouse_check_button_pressed(mb_middle) and global.special == MOUSE_MIDDLE){
                inputSpecial();
            }
            
        }
    }
    
    //toggle ready on pressing intel drop button, sends a custom bubble
    if !instance_exists(Spectator){
        if keyboard_check_pressed(global.drop) and global.isLive==0{
            RUP_toggleready()
        }
        
        if global.chatReady==1{
            RUP_ready()
            global.chatReady=0
        }
        if global.chatUnready==1{
            RUP_unready()
            global.chatUnready=0
        }
        if global.chatToggleReady==1{
            RUP_toggleready()
            global.chatToggleReady=0
        }
    }
    
    if(global.run_virtual_ticks){
        ClientInputstate(global.serverSocket, keybyte);
    }
    socket_send(global.serverSocket);
}else if (instance_exists(Spectator)){ // spectator controls
    if(!menuOpen){
        if instance_exists(CasterHUD){
            if CasterHUD.mouseMode!=2{
                if(mouse_check_button_pressed(mb_left)){
                    with (Spectator) event_user(7);
                }
                if(mouse_check_button_pressed(mb_right)){
                    with (Spectator) event_user(8);
                }
            }
        }else{
            if(mouse_check_button_pressed(mb_left)){
                with (Spectator) event_user(7);
            }
            if(mouse_check_button_pressed(mb_right)){
                with (Spectator) event_user(8);
            }
        }
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
