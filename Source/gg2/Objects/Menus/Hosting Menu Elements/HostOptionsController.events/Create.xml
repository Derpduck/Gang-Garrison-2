<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="CREATE" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">ini_open("gg2.ini");
global.timeLimitMins = ini_read_real("Server", "Time Limit", 15);
global.caplimit = ini_read_real("Server", "CapLimit", 5);
global.Server_RespawntimeSec = ini_read_real("Server", "Respawn Time", 5);
readClasslimitsFromIni();
ini_close();

//Server respawn time calculator. Converts each second to a frame. (read: multiply by 30 :hehe:)
if (global.Server_RespawntimeSec == 0)
    global.Server_Respawntime = 1;
else
    global.Server_Respawntime = global.Server_RespawntimeSec * 30;

menu_create(48, 172, 500, 260, 32, 40, 112, 128);
menumode = true;

menu_background(512, 24, 8, 12, 4);
bgtabs = true;

menu_addedit_text2("Server Name:", "global.serverName", '
    var newName;
    newName = string_copy(argument0, 0, 25);
    gg2_write_ini("Server", "ServerName", newName);
    return newName;
');
menu_addedit_text2("Welcome message:", "global.welcomeMessage", '
    var newMessage;
    newMessage = string_copy(argument0, 0, 255);
    gg2_write_ini("Server", "WelcomeMessage", newMessage);
    return newMessage;
');

menu_addedit_text("Password:", "global.serverPassword", '
    gg2_write_ini("Server", "Password", argument0);
');
menu_addedit_num("Player Limit:", "global.playerLimit", '
    gg2_write_ini("Settings", "PlayerLimit", argument0);
', 48);
menu_addedit_num("Time Limit (mins):", "global.timeLimitMins", '
    gg2_write_ini("Server", "Time Limit", argument0);
');
menu_addedit_num("Capture Limit:", "global.caplimit", '
    gg2_write_ini("Server", "CapLimit", argument0);
');
menu_addedit_num("Deathmatch Kill Limit:", "global.killLimit", '
    gg2_write_ini("Server", "Deathmatch Kill Limit", argument0);
');
menu_addedit_num("TDM Invulnerability (secs):", "global.tdmInvulnerabilitySeconds", '
	gg2_write_ini("Server", "Team Deathmatch Invulnerability Seconds", argument0);
');
menu_addedit_num("Respawn Time (secs):", "global.Server_RespawntimeSec", '
    gg2_write_ini("Server", "Respawn Time", argument0);
');
//DSM
menu_addedit_text("Server Sent Plugins:", "global.serverPluginList", '
    gg2_write_ini("Server", "ServerPluginList", argument0);
');
menu_addedit_text("Map Rotation:", "global.mapRotationFile", '
    gg2_write_ini("Server", "MapRotation", argument0);
    ds_list_clear(global.map_rotation)
if(global.mapRotationFile != "" &amp;&amp; file_exists(global.mapRotationFile) &amp;&amp; global.launchMap == ""){
        global.customMapdesginated = 1;
        var fileHandle, i, mapname;
        fileHandle = file_text_open_read(global.mapRotationFile);
        for(i = 1; !file_text_eof(fileHandle); i += 1){
            mapname = file_text_read_string(fileHandle);
            // remove leading whitespace from the string
            while(string_char_at(mapname, 0) == " " || string_char_at(mapname, 0) == chr(9)){ // while it starts with a space or tab
              mapname = string_delete(mapname, 0, 1); // delete that space or tab
            }
            if(mapname != "" &amp;&amp; string_char_at(mapname, 0) != "#") { // if it is not blank and it is not a comment (starting with #)
                ds_list_add(global.map_rotation, mapname);
            }
            file_text_readln(fileHandle);
        }
        file_text_close(fileHandle);
    }else if (global.launchMap != "") &amp;&amp; (global.dedicatedMode == 1){  
        ds_list_add(global.map_rotation, global.launchMap);
        }else{ // else load from the ini file Maps section
        //Set up the map rotation stuff
        var i, sort_list;
        sort_list = ds_list_create();
        for(i=1; i &lt;= 16; i += 1) {
            if(maps[i] != 0) ds_list_add(sort_list, ((100*maps[i])+i));
        }
        ds_list_sort(sort_list, 1);
        
        // translate the numbers back into the names they represent
        for(i=0; i &lt; ds_list_size(sort_list); i += 1) {
            switch(ds_list_find_value(sort_list, i) mod 100) {
                case 1:
                    ds_list_add(global.map_rotation, "ctf_truefort");
                break;
                case 2:
                    ds_list_add(global.map_rotation, "ctf_2dfort");
                break;
                case 3:
                    ds_list_add(global.map_rotation, "ctf_conflict");
                break;
                case 4:
                    ds_list_add(global.map_rotation, "ctf_classicwell");
                break;
                case 5:
                    ds_list_add(global.map_rotation, "ctf_waterway");
                break;
                case 6:
                    ds_list_add(global.map_rotation, "ctf_orange");
                break;
                case 7:
                    ds_list_add(global.map_rotation, "cp_dirtbowl");
                break;
                case 8:
                    ds_list_add(global.map_rotation, "cp_egypt");
                break;
                case 9:
                    ds_list_add(global.map_rotation, "arena_montane");
                break;
                case 10:
                    ds_list_add(global.map_rotation, "arena_lumberyard");
                break;
                case 11:
                    ds_list_add(global.map_rotation, "gen_destroy");
                break;
                case 12:
                    ds_list_add(global.map_rotation, "koth_valley");
                break;
                case 13:
                    ds_list_add(global.map_rotation, "koth_corinth");
                break;
                case 14:
                    ds_list_add(global.map_rotation, "koth_harvest");
                break;
                case 15:
                    ds_list_add(global.map_rotation, "dkoth_atalia");
                break;
                case 16:
                    ds_list_add(global.map_rotation, "dkoth_sixties");
                break;
                    
            }
        }
        ds_list_destroy(sort_list);
    }
');

menu_addtablink("Main", '
    instance_create(x,y,HostOptionsController);
    instance_destroy();
');
menu_addtablink("Advanced", '
    instance_create(x,y,AdvHostOptionsController);
    instance_destroy();
');
menu_addtablink("Classlimits", '
    instance_create(x,y,ClasslimitsMenuController);
    instance_destroy();
');

menu_addlink("Start Game", '
    start_server();
');
menu_addback("Back", '
    instance_create(x,y,MainMenuController);
    instance_destroy();
');
</argument>
      </arguments>
    </action>
  </actions>
</event>
