<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if global.boxHUD==1{
    event_user(0)
    exit;
}

{
    var xoffset, yoffset, xsize, ysize, i, player, redteam, blueteam, spec;
    
    xoffset = view_xview[0]+view_wview[0]/2-280;
    yoffset = view_yview[0]+view_hview[0]/2-190;
    xsize = 800/5*3;
    ysize = 600/5*3;
    xcenter = view_xview[0]+view_wview[0]/2;
    
    draw_sprite_ext(Scoreboard, 0, xoffset, yoffset, 1, 1, 0, c_white, alpha*0.8);

    draw_set_alpha(alpha);
    draw_set_color(c_white);
    draw_set_valign(fa_top);
    draw_set_halign(fa_center);
        
    redteam = ds_priority_create();
    blueteam = ds_priority_create();
    spec = ds_priority_create();
    
    for(i=0; i&lt;ds_list_size(global.players); i+=1){
        player = ds_list_find_value(global.players, i);
        
        if(player.team == TEAM_RED){
            ds_priority_add(redteam, player, player.stats[POINTS]);
        }else if (player.team == TEAM_BLUE){
            ds_priority_add(blueteam, player, player.stats[POINTS]);
        }else if (player.team == TEAM_SPECTATOR){
            ds_priority_add(spec, player, 0);
        }
    }
    
    draw_set_color(make_color_rgb(227,226,225));
    draw_set_halign(fa_right);
    draw_set_font(global.countFont);
    draw_text_transformed(xcenter-(400-239),yoffset+23,ds_priority_size(redteam),1,1,0);
    draw_text_transformed(xcenter-(400-483),yoffset+23,ds_priority_size(blueteam),1,1,0);
    draw_set_font(global.gg2Font);
    
    if instance_exists(CTFHUD){
        draw_text_transformed(xcenter-(400-384),yoffset,global.redCaps,4,4,0);
        draw_set_halign(fa_left);
        draw_text_transformed(xcenter-(400-412),yoffset,global.blueCaps,4,4,0);
    }else if instance_exists(ArenaHUD){
        draw_text_transformed(xcenter-(400-384),yoffset,ArenaHUD.redWins,4,4,0);
        draw_set_halign(fa_left);
        draw_text_transformed(xcenter-(400-412),yoffset,ArenaHUD.blueWins,4,4,0);
    }
    
    //red
    draw_set_color(make_color_rgb(249,57,57))
    for(i=0; ds_priority_size(redteam) &gt; 0; i += 1){
        player = ds_priority_delete_max(redteam);
        
        if (i&lt;12){
            if (showadmin and player != global.myself){
                var _x, _y;
                _x = xoffset+6;
                _y = yoffset+70+20*(i+1);
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
                if (mouse_x &gt;= _x and mouse_x &lt; _x+16 and mouse_y &gt;= _y and mouse_y &lt; _y+16){
                    draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                    if (mouse_check_button_pressed(mb_left)){
                        mouse_clear(mb_left);
                        player.kicked = true;
                    }        
                }
            }else{
                if (global.myself.team == player.team or global.mapchanging){
                    draw_sprite_ext(Icon,player.class,xoffset+14,yoffset+70+20*(i+1),1,1,0,c_white,alpha);
                    draw_sprite_ext(Icon,player.class,xoffset+14,yoffset+70+20*(i+1),1,1,0,c_red,alpha*0.2);
                }
            }
            
            if player==global.myself{
                //draw_set_color(make_color_rgb(255,101,0));
                draw_set_color(make_color_rgb(255,150,40))
                draw_name_badges(xoffset+28, yoffset+70+20*(i+1), player, alpha);
                draw_set_halign(fa_right);
                draw_text(xoffset+xsize/2-15, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            }else{
                draw_set_color(make_color_rgb(249,57,57))
                draw_name_badges(xoffset+28, yoffset+70+20*(i+1), player, alpha);
                draw_set_halign(fa_right);
                draw_text(xoffset+xsize/2-15, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            }
            
            //Ping
            displayPing=0
            if player.object!=-1{
                displayPing=player.object.playerPing
                player.oldPing=displayPing
            }else{
                displayPing=player.oldPing
            }
            draw_set_color(get_ping_color(displayPing))
            draw_text(xoffset+xsize/2+27, yoffset+70+20*(i+1), string(floor(displayPing)))
            
            if(player.object==-1){
                draw_sprite_ext(DeadS,0,xoffset+195,yoffset+75+20*(i+1),1,1,0,c_white,alpha);
            }
        }          
    }
    
    //blue
    draw_set_color(make_color_rgb(0,113,255))
    for(i=0; ds_priority_size(blueteam) &gt; 0; i+=1){
        player = ds_priority_delete_max(blueteam);

        if i&lt;12{
            if (showadmin &amp;&amp; player != global.myself){
                var _x, _y;
                _x = xoffset+xsize/2+44;
                _y = yoffset+70+20*(i+1);
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
                if (mouse_x &gt;= _x and mouse_x &lt; _x+16 and mouse_y &gt;= _y and mouse_y &lt; _y+16){
                    draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                    if (mouse_check_button_pressed(mb_left)){
                        mouse_clear(mb_left);
                        player.kicked = true;
                    }        
                }
            }else{
                if(global.myself.team == player.team){
                    draw_sprite_ext(Icon,player.class,xoffset+xsize/2+49,yoffset+70+20*(i+1),1,1,0,c_white,alpha);
                    draw_sprite_ext(Icon,player.class,xoffset+xsize/2+49,yoffset+70+20*(i+1),1,1,0,c_blue,alpha*0.2);
                }
            }

            if player==global.myself{
                draw_set_color(make_color_rgb(40,172,251));
                draw_name_badges(xoffset+xsize/2+60, yoffset+70+20*(i+1), player, alpha);
                draw_set_halign(fa_right);
                draw_text(xoffset+xsize+25, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            }else{
                draw_set_color(make_color_rgb(0,113,255))
                draw_name_badges(xoffset+xsize/2+60, yoffset+70+20*(i+1), player, alpha);
                draw_set_halign(fa_right);
                draw_text(xoffset+xsize+25, yoffset+70+20*(i+1), string(floor(player.stats[POINTS])));
            }
            
            //Ping
            displayPing=0
            if player.object!=-1{
                displayPing=player.object.playerPing
                player.oldPing=displayPing
            }else{
                displayPing=player.oldPing
            }
            draw_set_color(get_ping_color(displayPing))
            draw_text(xoffset+xsize+68, yoffset+70+20*(i+1), string(displayPing))
            
            if (player.object==-1){
                draw_sprite_ext(DeadS,0,xoffset+472,yoffset+75+20*(i+1),1,1,0,c_white,alpha);
            }
        
        }
    }
    
    //stats board
    stats_xoffset = view_xview[0]+view_wview[0]/2-280;
    stats_yoffset = view_yview[0]+view_hview[0]/2-190+405;
    
    draw_set_alpha(alpha)
    draw_set_color(c_white)
    draw_set_valign(fa_top)
    draw_set_halign(fa_middle)
    
    draw_sprite_ext(StatsBoardS, 0, stats_xoffset, stats_yoffset, 1, 1, 0, c_white, alpha*0.8)
    draw_text(stats_xoffset+5+50, stats_yoffset+8, "Kills: " + string(floor(global.myself.stats[KILLS])))
    draw_text(stats_xoffset+5+50, stats_yoffset+25, "Deaths: " + string(floor(global.myself.stats[DEATHS])))
    draw_text(stats_xoffset+5+50, stats_yoffset+42, "Assists: " + string(floor(global.myself.stats[ASSISTS])))
    draw_text(stats_xoffset+230+50, stats_yoffset+8, "Destruction: " + string(floor(global.myself.stats[DESTRUCTION])))
    draw_text(stats_xoffset+230+50, stats_yoffset+25, "Captures: " + string(floor(global.myself.stats[CAPS])))
    draw_text(stats_xoffset+230+50, stats_yoffset+42, "Defences: " + string(floor(global.myself.stats[DEFENSES])))
    draw_text(stats_xoffset+450+50, stats_yoffset+8, "Invulns: " + string(floor(global.myself.stats[INVULNS])))
    draw_text(stats_xoffset+450+50, stats_yoffset+25, "Healing: " + string(floor(global.myself.stats[HEALING])))
    draw_text(stats_xoffset+450+50, stats_yoffset+42, "Stabs: " + string(floor(global.myself.stats[STABS])))
    
    draw_set_color(c_white);
    draw_set_halign(fa_left);
    
    // Spectator printing code 
    
    draw_text(xoffset+xsize-475, yoffset+370,(string(ds_priority_size(spec))) + " spectator(s): ");
    
    specList="";
    
    var __x, __y, __x_max, __bootlen, __str;
    
    __y = yoffset+370;
    __x_min = xoffset+xsize-350;
    __x_max = xoffset+xsize + 50;
    __x = __x_min;
    __bootlen = 0;
    for(i=0; ds_priority_size(spec) &gt; 0; i+=1){
        player = ds_priority_delete_max(spec);
        
        if (showadmin &amp;&amp; player != global.myself){
            var _x, _y;
            _x = __x;
            _y = __y;
            __bootlen = 16;
            draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_white,alpha);
            if (mouse_x &gt;= _x and mouse_x &lt; _x+16 and mouse_y &gt;= _y and mouse_y &lt; _y+16){
                draw_sprite_ext(Boot,0,_x,_y,1,1,0,c_red,alpha*0.5);
                if (mouse_check_button_pressed(mb_left)){
                    mouse_clear(mb_left);
                    player.kicked = true;
                }        
            }
        }
        
        if (ds_priority_size(spec) == 0){
            __str = '';
        }else{
            __str = ', ';
        }
        
        if (__bootlen + __x + name_width_badges(player) + string_length(__str) &gt; __x_max){
            __x = __x_min;
            __y += string_height("/|ijgyA[") + 2;
        }
        draw_name_badges(__bootlen + __x, __y, player, alpha);
        __x += __bootlen + name_width_badges(player);
        draw_text(__x, __y, __str);
        __x += string_width(__str);
    }
    
    draw_text(xoffset + 8, yoffset+48, "Server: " + sanitiseNewlines(string_copy(global.joinedServerName,1,25)));
    draw_text(xoffset+xsize/2+16, yoffset+48, "    Map: " + sanitiseNewlines(string_copy(global.currentMap,1,25)));
    
    ds_priority_destroy(redteam);
    ds_priority_destroy(blueteam);
    ds_priority_destroy(spec);
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
