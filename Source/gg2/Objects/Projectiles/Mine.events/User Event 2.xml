<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="12">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    if(exploded == true) {
        exit;
    } else {
        exploded = true;
    }
    explo=instance_create(x,y,Explosion);
    explo.blastSize=blastRadius
    playsound(x,y,ExplosionSnd);
    
    with (Character) {
        if (distance_to_object(other) &lt; other.blastRadius and !(team == other.team and id != other.ownerPlayer.object and place_meeting(x, y+1, Obstacle))) and (global.jumpMode==0 or ((global.jumpMode==1 and global.jumpPlayerAttack=1) or id==other.ownerPlayer.object))
        {
            var rdir, vectorfactor;
            rdir = point_direction(other.x ,other.y, (bbox_left+bbox_right)/2, (bbox_top+bbox_bottom)/2);
            vectorfactor = point_distance(0, 0, sin(degtorad(rdir)), cos(degtorad(rdir))*0.8);
            if (1 - distance_to_object(other)/other.blastRadius &lt;= 0.25 and other.splashThreshhold) // skip if we're out of theshhold
                continue;
            motion_add(rdir, min(7, other.knockback-other.knockback*(distance_to_object(other)/other.blastRadius)) * vectorfactor);
            
            if ubered{
                if (id==other.ownerPlayer.object){
                    moveStatus = 1;
                }
            }
            
            if((other.team != team or id==other.ownerPlayer.object) and !ubered and hp &gt; 0){
                var dmg;
                dmg = other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius));
                if id == other.ownerPlayer.object// self damage resistance
                    dmg *= 5/9;
                damageCharacter(other.ownerPlayer, id, dmg);
                
                if other.ownerPlayer==global.myself{
                    var damageDone;
                    damageDone = instance_create(x,y,DamageIndicator)
                    damageDone.dmg = dmg
                    global.myself.stats[DAMAGE]+=dmg
                    global.myself.roundStats[DAMAGE]+=dmg
                    damageDone.owner = id
                }
                
                timeUnscathed = 0;
                if (id == other.ownerPlayer.object and instance_exists(lastDamageDealer) and lastDamageDealer != other.ownerPlayer and !instance_exists(other.reflector))
                    lastDamageSource = DAMAGE_SOURCE_FINISHED_OFF_GIB;
                else 
                {
                    if (lastDamageDealer != other.ownerPlayer and lastDamageDealer != player and other.reflector != lastDamageDealer)
                    {
                        secondToLastDamageDealer = lastDamageDealer;
                        alarm[4] = alarm[3]
                    }
                    if (other.ownerPlayer != id or (instance_exists(other.reflector) and other.ownerPlayer == id))
                        alarm[3] = ASSIST_TIME/global.delta_factor;
                    lastDamageDealer = other.ownerPlayer;
                    lastDamageSource = other.weapon;
                    if (id==other.ownerPlayer.object and instance_exists(other.reflector))
                    {
                        lastDamageDealer = other.reflector;
                        lastDamageSource = DAMAGE_SOURCE_REFLECTED_STICKY;
                    }
                }
                if(global.gibLevel &gt; 0)
                {
                    repeat(3)
                    {
                        var blood;
                        blood = instance_create(x,y,Blood);
                        blood.direction = point_direction(other.x,other.y,x,y)-180;
                    }
                }
                if (id==other.ownerPlayer.object){
                    moveStatus = 1;
                    if abs(hspeed)&gt;=9.5 and global.jumpMode==0{
                        hspeed=9.5*sign(hspeed)
                    }
                }else if (other.team == team){
                    moveStatus = 2;
                }else{
                    moveStatus = 4;
                }
            }
            dealFlicker(id)
        }
    }

    
    with (Sentry)
    {
        if (distance_to_object(other) &lt; other.blastRadius) and (team != other.team)
        { 
            if (1 - distance_to_object(other)/other.blastRadius &lt;= 0.25 and other.splashThreshhold) // skip if we're out of theshhold
                continue;
            damageSentry(other.ownerPlayer, id, other.explosionDamage*3/2*(1-(distance_to_object(other)/other.blastRadius))); // we want sentries to take ~11% extra damage so that two stickies will do 100 instead of 90 dmg. we don't change the base damage so scouts can't be 2-hitted. 
            
            if other.ownerPlayer==global.myself{
                var damageDone;
                damageDone = instance_create(x,y,DamageIndicator)
                damageDone.dmg = other.explosionDamage*3/2*(1-(distance_to_object(other)/other.blastRadius))
                global.myself.stats[DAMAGE]+=other.explosionDamage*3/2*(1-(distance_to_object(other)/other.blastRadius))
                global.myself.roundStats[DAMAGE]+=other.explosionDamage*3/2*(1-(distance_to_object(other)/other.blastRadius))
                damageDone.owner = id
            }
                
            lastDamageDealer = other.ownerPlayer;
            lastDamageSource = DAMAGE_SOURCE_MINEGUN;
        }   
    }    
     
     with (Generator)
     {
        if( (distance_to_object(other) &lt; other.blastRadius) and (team != other.team) )
        { 
            if (1 - distance_to_object(other)/other.blastRadius &lt;= 0.25 and other.splashThreshhold) // skip if we're out of theshhold
                continue;
            damageGenerator(other.ownerPlayer, id, other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius)));
            
            if other.ownerPlayer==global.myself{
                var damageDone;
                damageDone = instance_create(x,y,DamageIndicator)
                damageDone.dmg = other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius))
                global.myself.stats[DAMAGE]+=other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius))
                global.myself.roundStats[DAMAGE]+=other.explosionDamage*(1-(distance_to_object(other)/other.blastRadius))
                damageDone.owner = id
            }
        }   
    }
       
    with (Rocket){
        if (distance_to_object(other) &lt; other.affectRadius * 0.75 and (other.team != team or other.ownerPlayer == ownerPlayer)){
            if(distance_to_object(other) &lt; other.affectRadius * 0.25){
                characterHit = -1;
                event_user(5);
            }else{
                motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/(other.affectRadius)));
            }
        }
    }
    
    with (DeadGuy)
    {
        if (distance_to_object(other) &lt; other.affectRadius * 0.75)
        {
            motion_add(point_direction(other.x,other.y,x,y),10-10*(distance_to_object(other)/other.affectRadius));
        }
    }
    
    with(Mine) {
        if (distance_to_object(other) &lt; other.blastRadius
            and (other.team != team or other.ownerPlayer == ownerPlayer))
        {
            if (1 - distance_to_object(other)/other.blastRadius &lt;= 0.25 and other.splashThreshhold) // skip if we're out of theshhold
                continue;
            event_user(2);
        }
    }
    with (Gib)
    {
        if (distance_to_object(other) &lt; other.affectRadius * 0.75)
        {
            motion_add(point_direction(other.x,other.y,x,y),15-15*(distance_to_object(other)/other.affectRadius));
            rotspeed=random(151)-75;
        }
    }
    
    with(LooseSheet)
    {
        if (distance_to_object(other) &lt; other.affectRadius * 0.75)
            motion_add(point_direction(other.x, other.y, x, y)
                      ,10-10*(distance_to_object(other)/other.affectRadius));
        
    }
    
    with(SuperBubble)
    {
        if (point_distance(x, y, other.x, other.y) &lt; other.affectRadius) and (team != other.team){ //other.affectRadius + selfPopRadius)
            damageAuto(other.ownerPlayer, id, other.explosionDamage*3/2.7*(1-(distance_to_object(other)/other.affectRadius)));
            other.lastDamageDealer = ownerPlayer;
            other.lastDamageSource = weapon;
            
            if other.ownerPlayer==global.myself{
                var damageDone;
                damageDone = instance_create(x,y,DamageIndicator)
                damageDone.dmg = other.explosionDamage*3/2.7*(1-(distance_to_object(other)/other.affectRadius))
                global.myself.stats[DAMAGE]+=other.explosionDamage*3/2.7*(1-(distance_to_object(other)/other.affectRadius))
                global.myself.roundStats[DAMAGE]+=other.explosionDamage*3/2.7*(1-(distance_to_object(other)/other.affectRadius))
                damageDone.owner = id
            }
        }
    }
    
    instance_destroy();
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
