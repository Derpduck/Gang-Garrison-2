<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">offsetX = view_xview[0];
offsetY = view_yview[0];
sizeX = view_wview[0] + offsetX;
sizeY = view_hview[0] + offsetY;
boxPaddingWidth = 4;
boxPaddingHeight = 8;
lineSpacing = 16;
textPadding = 6;

draw_set_alpha(global.consoleOpacity / 100);
draw_set_color(c_black);

// Background Boxes
boxLeft = offsetX + boxPaddingWidth;
boxRight = sizeX - boxPaddingWidth;

// Input Box
inputBoxBottom = sizeY - boxPaddingHeight;
inputBoxTop = sizeY - boxPaddingHeight - lineSpacing;
draw_rectangle(boxLeft, inputBoxTop, boxRight, inputBoxBottom, false);

// Output Box
outputBoxBottom = inputBoxTop - boxPaddingHeight;
outputBoxTop = outputBoxBottom - (global.consoleLines * lineSpacing);
draw_rectangle(boxLeft, outputBoxTop, boxRight, outputBoxBottom, false);

// Console Borders
// TODO: Thin white box on outside
draw_set_alpha(1);
draw_set_color(c_white);
draw_rectangle(boxLeft, inputBoxTop, boxRight, inputBoxBottom, true);
draw_rectangle(boxLeft, outputBoxTop, boxRight, outputBoxBottom, true);

// Text
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_font(global.consoleFont)
// Input Box
inputTextHeightOffset = 3;
draw_text(boxLeft + textPadding, inputBoxTop + inputTextHeightOffset, currentText);

// Input Cursor
if (cursorMoving or cursorBlink)
{
    cursorNextPosition = string_width(string_copy(currentText, 0, cursorPosition));
    draw_set_color(make_color_rgb(0, 255, 0));
    draw_text(boxLeft + textPadding + cursorNextPosition - 3, inputBoxTop + inputTextHeightOffset, "|");
    draw_set_color(c_white);
}

// Output Box
var outputLine;
for(i=0; i&lt;ds_list_size(global.consoleOutputHistory); i+=1)
{
    outputLine = ds_list_find_value(global.consoleOutputHistory, ds_list_size(global.consoleOutputHistory) - i - 1);
    
    // Handle color codes per line
    switch (string_copy(outputLine, 0, 3))
    {
    case "/:/":
        draw_set_color(get_color_code(string_copy(outputLine, 4, COLOR_RGB_LENGTH)));
        draw_text(boxLeft + textPadding, outputBoxBottom - (lineSpacing * (i + 1)), string_copy(outputLine, 4 + COLOR_RGB_LENGTH, string_length(outputLine) - (4 + COLOR_RGB_LENGTH - 1)));
        break;

    default:
        draw_set_color(c_white);
        draw_text(boxLeft + textPadding, outputBoxBottom - (lineSpacing * (i + 1)), outputLine);
        break;
    }
}

draw_set_font(global.gg2Font);
</argument>
      </arguments>
    </action>
  </actions>
</event>
