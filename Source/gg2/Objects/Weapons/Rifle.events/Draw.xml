<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">event_inherited();
if (tracerAlpha &gt; 0.05){
    shot = false;
    var origdepth;
    origdepth = depth;
    depth = -2;
    
    draw_set_alpha(tracerAlpha);
    if(owner.team == TEAM_RED){
        draw_line_width_color(shotx,shoty,x2,y2,2,c_red,c_red);
    }else{
        draw_line_width_color(shotx,shoty,x2,y2,2,c_blue,c_blue);
    }
    tracerAlpha /= delta_mult(1.25)//delta_mult(1.75);
        
    draw_set_alpha(1);
    depth = origdepth;
}else{
    tracerAlpha = 0;
}

if (owner.zoomed &amp;&amp; owner == global.myself.object){
    if (hitDamage &lt; maxDamage){
        draw_set_alpha(0.25);
        draw_sprite_ext(ChargeS, 0, mouse_x + 15*-image_xscale, mouse_y - 10, -image_xscale, 1, 0, c_white, image_alpha);
        draw_set_alpha(0.8);
    }else{
        draw_sprite_ext(FullChargeS, 0, mouse_x + 65*-image_xscale, mouse_y-7, 1, 1, 0, c_white, image_alpha);
    }
    draw_sprite_part_ext(ChargeS, 1, 0, 0, ceil((hitDamage-baseDamage)*40/(maxDamage-baseDamage)), 20, mouse_x + 15*-image_xscale, mouse_y - 10, -image_xscale, 1, c_white, image_alpha);
}

if golden==1 and global.useCustomHaxxyColor==1 and owner==global.myself.object and global.haxxyColorSelection!=2{
    normalSprite=RifleBlankS
    recoilSprite=RifleBlankFS
    reloadSprite=RifleBlankFRS
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
